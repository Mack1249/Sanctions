'Worksheet
' Code Generated by Sidekick is for learning and experimentation purposes only.
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    ' Use double-click to open multi-select form for F and G columns
    If Not Intersect(Target, Range("F2:F1000,G2:G1000")) Is Nothing Then
        Cancel = True
        Call ShowMultiSelectForm(Target)
    End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    If Target.Count > 1 Then Exit Sub
    
    ' Update child dropdown when parent changes
    If Not Intersect(Target, Range("F2:F1000")) Is Nothing Then
        Call UpdateChildDropdown(Target)
    End If
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    ' Set up validations when selecting cells
    If Target.Count = 1 Then
        If Not Intersect(Target, Range("F2:F1000")) Is Nothing Then
            Call SetupParentValidation(Target)
        ElseIf Not Intersect(Target, Range("G2:G1000")) Is Nothing Then
            Call SetupChildValidation(Target)
        End If
    End If
End Sub




'Module
' Code Generated by Sidekick is for learning and experimentation purposes only.
Option Explicit

Sub ShowMultiSelectForm(Target As Range)
    Dim availableItems As String
    Dim selectedItems As String
    Dim itemsArray As Variant
    Dim selectedArray As Variant
    Dim i As Integer
    Dim item As String
    Dim newSelection As String
    
    ' Get available items based on column
    If Target.Column = 6 Then ' F column - Parents
        availableItems = GetParentOptions()
    Else ' G column - Children
        Dim parentCell As Range
        Set parentCell = Target.Offset(0, -1)
        If parentCell.Value = "" Then
            MsgBox "Please select parent items first."
            Exit Sub
        End If
        availableItems = GetChildOptions(parentCell.Value)
    End If
    
    If availableItems = "" Then
        MsgBox "No options available."
        Exit Sub
    End If
    
    ' Get currently selected items
    selectedItems = Target.Value
    
    ' Show selection dialog
    newSelection = ShowSelectionDialog(availableItems, selectedItems, Target.Address)
    
    ' Update cell with new selection
    If newSelection <> selectedItems Then
        Application.EnableEvents = False
        Target.Value = newSelection
        Application.EnableEvents = True
        
        ' Update child dropdown if parent changed
        If Target.Column = 6 Then
            Call UpdateChildDropdown(Target)
        End If
    End If
End Sub

Function ShowSelectionDialog(availableItems As String, currentSelection As String, cellAddress As String) As String
    Dim items As Variant
    Dim selected As Variant
    Dim i As Integer
    Dim msg As String
    Dim response As String
    Dim newSelection As String
    
    items = Split(availableItems, ",")
    
    ' Build current selection array
    If currentSelection <> "" Then
        selected = Split(currentSelection, Chr(10))
    Else
        ReDim selected(-1)
    End If
    
    ' Create selection message
    msg = "Multi-Select for " & cellAddress & vbCrLf & vbCrLf
    msg = msg & "Available options (enter numbers separated by commas):" & vbCrLf
    
    For i = 0 To UBound(items)
        msg = msg & (i + 1) & ". " & Trim(items(i))
        
        ' Mark if currently selected
        If IsItemSelected(Trim(items(i)), selected) Then
            msg = msg & " [SELECTED]"
        End If
        msg = msg & vbCrLf
    Next i
    
    msg = msg & vbCrLf & "Enter numbers (e.g., 1,3,5) or leave blank to clear:"
    
    response = InputBox(msg, "Multi-Select Options")
    
    If response = "" Then
        ShowSelectionDialog = ""
    Else
        newSelection = ProcessSelection(response, items)
        ShowSelectionDialog = newSelection
    End If
End Function

Function IsItemSelected(item As String, selectedArray As Variant) As Boolean
    Dim i As Integer
    
    If UBound(selectedArray) = -1 Then
        IsItemSelected = False
        Exit Function
    End If
    
    For i = 0 To UBound(selectedArray)
        If Trim(selectedArray(i)) = item Then
            IsItemSelected = True
            Exit Function
        End If
    Next i
    
    IsItemSelected = False
End Function

Function ProcessSelection(response As String, items As Variant) As String
    Dim numbers As Variant
    Dim i As Integer
    Dim num As Integer
    Dim result As String
    
    numbers = Split(response, ",")
    
    For i = 0 To UBound(numbers)
        If IsNumeric(Trim(numbers(i))) Then
            num = CInt(Trim(numbers(i)))
            If num >= 1 And num <= UBound(items) + 1 Then
                If result = "" Then
                    result = Trim(items(num - 1))
                Else
                    result = result & Chr(10) & Trim(items(num - 1))
                End If
            End If
        End If
    Next i
    
    ProcessSelection = result
End Function

Function GetParentOptions() As String
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim uniqueValues As Object
    Dim i As Long
    Dim value As String
    Dim result As String
    Dim key As Variant
    
    Set ws = Worksheets("Dropdowns")
    Set uniqueValues = CreateObject("Scripting.Dictionary")
    
    lastRow = ws.Cells(ws.Rows.Count, "H").End(xlUp).Row
    
    For i = 2 To lastRow
        value = Trim(ws.Cells(i, "H").Value)
        If value <> "" Then
            uniqueValues(value) = True
        End If
    Next i
    
    For Each key In uniqueValues.Keys
        If result = "" Then
            result = key
        Else
            result = result & "," & key
        End If
    Next key
    
    GetParentOptions = result
End Function

Function GetChildOptions(parentValues As String) As String
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim parents As Variant
    Dim uniqueChildren As Object
    Dim i As Long, j As Long
    Dim parentValue As String
    Dim childValue As String
    Dim result As String
    Dim key As Variant
    
    Set ws = Worksheets("Dropdowns")
    Set uniqueChildren = CreateObject("Scripting.Dictionary")
    
    lastRow = ws.Cells(ws.Rows.Count, "H").End(xlUp).Row
    
    If InStr(parentValues, Chr(10)) > 0 Then
        parents = Split(parentValues, Chr(10))
    Else
        ReDim parents(0)
        parents(0) = parentValues
    End If
    
    For i = 0 To UBound(parents)
        parentValue = Trim(parents(i))
        If parentValue <> "" Then
            For j = 2 To lastRow
                If Trim(ws.Cells(j, "H").Value) = parentValue Then
                    childValue = Trim(ws.Cells(j, "I").Value)
                    If childValue <> "" Then
                        uniqueChildren(childValue) = True
                    End If
                End If
            Next j
        End If
    Next i
    
    For Each key In uniqueChildren.Keys
        If result = "" Then
            result = key
        Else
            result = result & "," & key
        End If
    Next key
    
    GetChildOptions = result
End Function

Sub SetupParentValidation(Target As Range)
    Dim parentList As String
    
    parentList = GetParentOptions()
    
    If parentList <> "" Then
        With Target.Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Formula1:=parentList
            .IgnoreBlank = True
            .InCellDropdown = True
        End With
    End If
End Sub

Sub SetupChildValidation(Target As Range)
    Dim parentCell As Range
    Dim childList As String
    
    Set parentCell = Target.Offset(0, -1)
    
    If parentCell.Value <> "" Then
        childList = GetChildOptions(parentCell.Value)
        
        If childList <> "" Then
            With Target.Validation
                .Delete
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Formula1:=childList
                .IgnoreBlank = True
                .InCellDropdown = True
            End With
        End If
    End If
End Sub

Sub UpdateChildDropdown(Target As Range)
    Dim childCell As Range
    Dim childList As String
    
    Set childCell = Target.Offset(0, 1)
    
    Application.EnableEvents = False
    childCell.ClearContents
    childCell.Validation.Delete
    Application.EnableEvents = True
    
    If Target.Value <> "" Then
        childList = GetChildOptions(Target.Value)
        
        If childList <> "" Then
            With childCell.Validation
                .Delete
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Formula1:=childList
                .IgnoreBlank = True
                .InCellDropdown = True
            End With
        End If
    End If
End Sub

' Run once to initialize
Sub InitializeValidations()
    Dim ws As Worksheet
    Dim parentList As String
    
    Set ws = Worksheets("Tracker")
    parentList = GetParentOptions()
    
    If parentList <> "" Then
        With ws.Range("F2:F1000").Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Formula1:=parentList
            .IgnoreBlank = True
            .InCellDropdown = True
        End With
        MsgBox "Validations initialized successfully!"
    End If
End Sub
