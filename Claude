' Workbook
Private Sub Workbook_Open()
    On Error Resume Next
    Call SetupValidationForFG
    On Error GoTo 0
End Sub
'Sheet
' Code Generated by Sidekick is for learning and experimentation purposes only.
Private Sub Worksheet_Change(ByVal Target As Range)
    If Target.Cells.Count > 1 Then Exit Sub ' Avoid processing multiple cells
    
    Dim rngF As Range, rngG As Range
    Set rngF = Me.Range("F2:F50000")
    Set rngG = Me.Range("G2:G50000")
    
    Application.EnableEvents = False
    
    On Error GoTo ErrorHandler
    
    If Not Intersect(Target, rngF) Is Nothing Then
        Call UpdateChildValidation(Target)
        Call HandleMultiSelect(Target)
    ElseIf Not Intersect(Target, rngG) Is Nothing Then
        Call HandleMultiSelect(Target)
    End If
    
ErrorHandler:
    Application.EnableEvents = True
    If Err.Number <> 0 Then
        MsgBox "Error: " & Err.Description
        Err.Clear
    End If
End Sub
'Module
' Code Generated by Sidekick is for learning and experimentation purposes only.
Public Sub SetupValidationForFG()
    Dim ws As Worksheet
    Set ws = ActiveSheet ' Changed from ThisWorkbook.Sheets("Sheet1")
    
    ' Or specify the exact sheet name:
    ' Set ws = ThisWorkbook.Sheets("YourActualSheetName")
    
    Dim lastRow As Long
    ' Find actual last row instead of using 50000
    lastRow = ws.Cells(ws.Rows.Count, "F").End(xlUp).Row
    If lastRow < 2 Then lastRow = 100 ' Set minimum range
    
    Dim i As Long
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    On Error Resume Next
    
    For i = 2 To lastRow
        With ws.Cells(i, 6).Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
                 Operator:=xlBetween, Formula1:="=dropdowns!$H$2:$H$125"
            .IgnoreBlank = True
            .InCellDropdown = True
        End With
        
        ' Only update child validation if there's a value
        If ws.Cells(i, 6).Value <> "" Then
            Call UpdateChildValidation(ws.Cells(i, 6))
        End If
    Next i
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    On Error GoTo 0
End Sub

Public Sub UpdateChildValidation(cellF As Range)
    On Error GoTo ErrorHandler
    
    Dim wsDrop As Worksheet
    Set wsDrop = ThisWorkbook.Sheets("dropdowns")
    
    ' Check if cellF has a value
    If cellF.Value = "" Then Exit Sub
    
    Dim parents As Variant, cellG As Range
    Dim dict As Object: Set dict = CreateObject("Scripting.Dictionary")
    
    parents = Split(cellF.Value, Chr(10))
    
    ' Build parent-child dictionary
    Dim i As Long
    For i = 2 To 125
        If Not IsError(wsDrop.Cells(i, "H")) And Not IsEmpty(wsDrop.Cells(i, "H")) Then
            Dim p As String: p = Trim(CStr(wsDrop.Cells(i, "H").Value))
            Dim c As String: c = CStr(wsDrop.Cells(i, "I").Value)
            
            If p <> "" And c <> "" Then
                If Not dict.exists(p) Then dict(p) = ""
                If dict(p) <> "" Then dict(p) = dict(p) & Chr(10)
                dict(p) = dict(p) & c
            End If
        End If
    Next i
    
    ' Build child list based on selected parents
    Dim childList As String
    Dim j As Long
    For j = LBound(parents) To UBound(parents)
        p = Trim(CStr(parents(j)))
        If p <> "" And dict.exists(p) Then
            If childList <> "" Then childList = childList & Chr(10)
            childList = childList & dict(p)
        End If
    Next j
    
    ' Remove duplicates
    If childList <> "" Then
        Dim raw() As String: raw = Split(childList, Chr(10))
        Dim finalDict As Object: Set finalDict = CreateObject("Scripting.Dictionary")
        
        For i = LBound(raw) To UBound(raw)
            Dim item As String: item = Trim(raw(i))
            If item <> "" Then finalDict(item) = 1
        Next i
        
        childList = ""
        Dim key As Variant
        For Each key In finalDict.keys
            If childList <> "" Then childList = childList & ","
            childList = childList & key
        Next key
    End If
    
    ' Apply validation to column G
    Set cellG = cellF.Offset(0, 1)
    With cellG.Validation
        .Delete
        If childList <> "" Then
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
                 Operator:=xlBetween, Formula1:=childList
            .IgnoreBlank = True
            .InCellDropdown = True
        End If
    End With
    
    Exit Sub
    
ErrorHandler:
    Debug.Print "Error in UpdateChildValidation: " & Err.Description
End Sub

Public Sub HandleMultiSelect(cell As Range)
    On Error GoTo ErrorHandler
    
    If cell.Validation.Type <> xlValidateList Then Exit Sub
    
    Dim clicked As String: clicked = cell.Value
    If clicked = "" Then Exit Sub
    
    Application.Undo
    Dim currentVal As String: currentVal = cell.Value
    
    If currentVal = "" Then
        cell.Value = clicked
    Else
        Dim valList As Variant: valList = Split(currentVal, Chr(10))
        Dim found As Boolean: found = False
        Dim i As Long
        
        ' Check if clicked value already exists (to toggle it off)
        For i = LBound(valList) To UBound(valList)
            If Trim(CStr(valList(i))) = clicked Then
                valList(i) = ""
                found = True
                Exit For
            End If
        Next i
        
        ' Rebuild the value string
        Dim newVal As String
        For i = LBound(valList) To UBound(valList)
            If Trim(CStr(valList(i))) <> "" Then
                If newVal <> "" Then newVal = newVal & Chr(10)
                newVal = newVal & Trim(CStr(valList(i)))
            End If
        Next i
        
        ' If not found, add the new value
        If Not found Then
            If newVal <> "" Then newVal = newVal & Chr(10)
            newVal = newVal & clicked
        End If
        
        cell.Value = newVal
    End If
    
    Exit Sub
    
ErrorHandler:
    Debug.Print "Error in HandleMultiSelect: " & Err.Description
End Sub
