'Worksheet
' Code Generated by Sidekick is for learning and experimentation purposes only.
Option Explicit

Private Sub Worksheet_Change(ByVal Destination As Range)
    Dim rngDropdown As Range
    Dim oldValue As String
    Dim newValue As String
    Dim DelimiterType As String
    DelimiterType = Chr(10)
    Dim DelimiterCount As Integer
    Dim TargetType As Integer
    Dim i As Integer
    Dim arr() As String
    
    If Destination.Count > 1 Then Exit Sub
    On Error Resume Next
    
    Set rngDropdown = Cells.SpecialCells(xlCellTypeAllValidation)
    On Error GoTo exitError
    
    If rngDropdown Is Nothing Then GoTo exitError
    
    TargetType = 0
    TargetType = Destination.Validation.Type
    If TargetType = 3 Then  ' is validation type is "list"
        Application.ScreenUpdating = False
        Application.EnableEvents = False
        newValue = Destination.Value
        Application.Undo
        oldValue = Destination.Value
        Destination.Value = newValue
        
        If oldValue <> "" Then
            If newValue <> "" Then
                If oldValue = newValue Or oldValue = newValue & Replace(DelimiterType, " ", "") Or oldValue = newValue & DelimiterType Then
                    oldValue = Replace(oldValue, DelimiterType, "")
                    oldValue = Replace(oldValue, Replace(DelimiterType, " ", ""), "")
                    Destination.Value = oldValue
                ElseIf InStr(1, oldValue, DelimiterType & newValue) Or InStr(1, oldValue, newValue & DelimiterType) Or InStr(1, oldValue, DelimiterType & newValue & DelimiterType) Then
                    arr = Split(oldValue, DelimiterType)
                    If Not IsError(Application.Match(newValue, arr, 0)) = 0 Then
                        Destination.Value = oldValue & DelimiterType & newValue
                    Else:
                        Destination.Value = ""
                        For i = 0 To UBound(arr)
                            If arr(i) <> newValue Then
                                Destination.Value = Destination.Value & arr(i) & DelimiterType
                            End If
                        Next i
                        Destination.Value = Left(Destination.Value, Len(Destination.Value) - Len(DelimiterType))
                    End If
                ElseIf InStr(1, oldValue, newValue & Replace(DelimiterType, " ", "")) Then
                    oldValue = Replace(oldValue, newValue, "")
                    Destination.Value = oldValue
                Else
                    Destination.Value = oldValue & DelimiterType & newValue
                End If
                
                Destination.Value = Replace(Destination.Value, Replace(DelimiterType, " ", "") & Replace(DelimiterType, " ", ""), Replace(DelimiterType, " ", ""))
                Destination.Value = Replace(Destination.Value, DelimiterType & Replace(DelimiterType, " ", ""), Replace(DelimiterType, " ", ""))
                
                If Destination.Value <> "" Then
                    If Right(Destination.Value, 2) = DelimiterType Then
                        Destination.Value = Left(Destination.Value, Len(Destination.Value) - 2)
                    End If
                End If
                
                If InStr(1, Destination.Value, DelimiterType) = 1 Then
                    Destination.Value = Replace(Destination.Value, DelimiterType, "", 1, 1)
                End If
                
                If InStr(1, Destination.Value, Replace(DelimiterType, " ", "")) = 1 Then
                    Destination.Value = Replace(Destination.Value, Replace(DelimiterType, " ", ""), "", 1, 1)
                End If
                
                DelimiterCount = 0
                For i = 1 To Len(Destination.Value)
                    If InStr(i, Destination.Value, Replace(DelimiterType, " ", "")) Then
                        DelimiterCount = DelimiterCount + 1
                    End If
                Next i
                
                If DelimiterCount = 1 Then
                    Destination.Value = Replace(Destination.Value, DelimiterType, "")
                    Destination.Value = Replace(Destination.Value, Replace(DelimiterType, " ", ""), "")
                End If
            End If
        End If
        
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        
        ' AFTER multi-select is complete, handle parent-child relationship
        Application.EnableEvents = False
        If Not Intersect(Destination, Range("F2:F50000")) Is Nothing Then
            Call UpdateChildDropdownAfterParentChange(Destination)
        End If
        Application.EnableEvents = True
    End If
    
exitError:
    Application.EnableEvents = True
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    ' Set up validation with proper error handling
    If Target.Count = 1 Then
        If Not Intersect(Target, Range("F2:F50000")) Is Nothing Then
            Call SetupParentValidationIfNeeded(Target)
        ElseIf Not Intersect(Target, Range("G2:G50000")) Is Nothing Then
            Call SetupChildValidation(Target)
        End If
    End If
End Sub


'Module
' Code Generated by Sidekick is for learning and experimentation purposes only.
Sub SetupParentValidationIfNeeded(Target As Range)
    Dim hasValidation As Boolean
    Dim ws As Worksheet
    Dim uniqueParents As Collection
    Dim parentList As String
    Dim i As Long
    Dim lastRow As Long
    Dim parentValue As String
    
    ' Check if validation already exists
    hasValidation = False
    On Error Resume Next
    hasValidation = (Target.Validation.Type = 3)
    On Error GoTo 0
    
    ' Only set up validation if it doesn't exist
    If Not hasValidation Then
        Set ws = Worksheets("Dropdowns")
        Set uniqueParents = New Collection
        
        lastRow = ws.Cells(ws.Rows.Count, "H").End(xlUp).Row
        
        On Error Resume Next
        For i = 2 To lastRow
            parentValue = Trim(ws.Cells(i, "H").Value)
            If parentValue <> "" Then
                uniqueParents.Add parentValue, parentValue
            End If
        Next i
        On Error GoTo 0
        
        For i = 1 To uniqueParents.Count
            If parentList = "" Then
                parentList = uniqueParents(i)
            Else
                parentList = parentList & "," & uniqueParents(i)
            End If
        Next i
        
        With Target.Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Formula1:=parentList
            .IgnoreBlank = True
            .InCellDropdown = True
        End With
    End If
End Sub

Sub SetupChildValidation(Target As Range)
    Dim parentCell As Range
    Dim childList As String
    
    Set parentCell = Target.Offset(0, -1)
    
    If parentCell.Value <> "" Then
        childList = GetChildrenForParents(parentCell.Value)
        With Target.Validation
            .Delete
            If childList <> "" Then
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Formula1:=childList
                .IgnoreBlank = True
                .InCellDropdown = True
            End If
        End With
    End If
End Sub

Sub UpdateChildDropdownAfterParentChange(parentCell As Range)
    Dim childCell As Range
    Dim childList As String
    
    Set childCell = parentCell.Offset(0, 1)
    childCell.Value = ""
    
    childList = GetChildrenForParents(parentCell.Value)
    
    With childCell.Validation
        .Delete
        If childList <> "" Then
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Formula1:=childList
            .IgnoreBlank = True
            .InCellDropdown = True
        End If
    End With
End Sub

Function GetChildrenForParents(parentValues As String) As String
    Dim ws As Worksheet
    Dim parentsArray As Variant
    Dim childrenCollection As Collection
    Dim i As Long, j As Long
    Dim lastRow As Long
    Dim parentValue As String
    Dim childValue As String
    Dim result As String
    
    Set ws = Worksheets("Dropdowns")
    Set childrenCollection = New Collection
    
    If Trim(parentValues) = "" Then
        GetChildrenForParents = ""
        Exit Function
    End If
    
    If InStr(parentValues, Chr(10)) > 0 Then
        parentsArray = Split(parentValues, Chr(10))
    Else
        ReDim parentsArray(0)
        parentsArray(0) = parentValues
    End If
    
    lastRow = ws.Cells(ws.Rows.Count, "H").End(xlUp).Row
    
    On Error Resume Next
    For i = 0 To UBound(parentsArray)
        parentValue = Trim(parentsArray(i))
        If parentValue <> "" Then
            For j = 2 To lastRow
                If Trim(ws.Cells(j, "H").Value) = parentValue Then
                    childValue = Trim(ws.Cells(j, "I").Value)
                    If childValue <> "" Then
                        childrenCollection.Add childValue, childValue
                    End If
                End If
            Next j
        End If
    Next i
    On Error GoTo 0
    
    For i = 1 To childrenCollection.Count
        If result = "" Then
            result = childrenCollection(i)
        Else
            result = result & "," & childrenCollection(i)
        End If
    Next i
    
    GetChildrenForParents = result
End Function

' Run this ONCE to set up all parent validations
Sub InitializeAllParentDropdowns()
    Dim ws As Worksheet
    Dim wsDropdowns As Worksheet
    Dim uniqueParents As Collection
    Dim parentList As String
    Dim i As Long
    Dim lastRow As Long
    Dim parentValue As String
    
    Set ws = Worksheets("Tracker")
    Set wsDropdowns = Worksheets("Dropdowns")
    Set uniqueParents = New Collection
    
    lastRow = wsDropdowns.Cells(wsDropdowns.Rows.Count, "H").End(xlUp).Row
    
    On Error Resume Next
    For i = 2 To lastRow
        parentValue = Trim(wsDropdowns.Cells(i, "H").Value)
        If parentValue <> "" Then
            uniqueParents.Add parentValue, parentValue
        End If
    Next i
    On Error GoTo 0
    
    For i = 1 To uniqueParents.Count
        If parentList = "" Then
            parentList = uniqueParents(i)
        Else
            parentList = parentList & "," & uniqueParents(i)
        End If
    Next i
    
    With ws.Range("F2:F50000").Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Formula1:=parentList
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    
    MsgBox "All parent dropdowns initialized!"
End Sub

