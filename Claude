' ========================================================================
' COMPLETE MULTI-SELECT DEPENDENT DROPDOWN VBA SOLUTION
' ========================================================================
' This code should be placed in the worksheet module (e.g., Sheet1, Sheet2, etc.)
' Right-click on sheet tab → View Code → Paste this code

Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo ErrorHandler
    
    ' Define ranges
    Dim ParentRange As Range
    Dim ChildRange As Range
    Dim ExistingRange As Range
    
    Set ParentRange = Me.Range("F2:F50000")
    Set ChildRange = Me.Range("G2:G50000")
    Set ExistingRange = Me.Range("H2:L50000") ' Existing macro range
    
    ' Check if change is in our target ranges
    If Not Intersect(Target, ParentRange) Is Nothing Then
        HandleParentChange Target, ParentRange, ChildRange
    ElseIf Not Intersect(Target, ChildRange) Is Nothing Then
        HandleChildChange Target, ChildRange
    ElseIf Not Intersect(Target, ExistingRange) Is Nothing Then
        HandleExistingRange Target, ExistingRange
    End If
    
    Exit Sub
    
ErrorHandler:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub

Private Sub HandleParentChange(ByVal Target As Range, ParentRange As Range, ChildRange As Range)
    On Error GoTo ErrorHandler
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim cell As Range
    For Each cell In Target
        If Not Intersect(cell, ParentRange) Is Nothing Then
            ' Handle multi-select for parent
            ProcessMultiSelect cell
            
            ' Update child dropdown for this row
            UpdateChildDropdown cell, ChildRange
        End If
    Next cell
    
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Exit Sub
    
ErrorHandler:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub

Private Sub HandleChildChange(ByVal Target As Range, ChildRange As Range)
    On Error GoTo ErrorHandler
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim cell As Range
    For Each cell In Target
        If Not Intersect(cell, ChildRange) Is Nothing Then
            ' Handle multi-select for child
            ProcessMultiSelect cell
        End If
    Next cell
    
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Exit Sub
    
ErrorHandler:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub

Private Sub HandleExistingRange(ByVal Target As Range, ExistingRange As Range)
    On Error GoTo ErrorHandler
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim cell As Range
    For Each cell In Target
        If Not Intersect(cell, ExistingRange) Is Nothing Then
            ' Handle existing multi-select functionality
            ProcessMultiSelect cell
        End If
    Next cell
    
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Exit Sub
    
ErrorHandler:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub

Private Sub ProcessMultiSelect(ByVal Target As Range)
    On Error GoTo ErrorHandler
    
    Dim oldValue As String
    Dim newValue As String
    Dim cellValue As String
    
    ' Get the new value that was just entered
    newValue = Target.Value
    
    ' Get the old value using Application.Undo trick
    Application.EnableEvents = False
    Application.Undo
    oldValue = Target.Value
    Target.Value = newValue
    Application.EnableEvents = True
    
    ' If old value is empty, just set the new value
    If oldValue = "" Then
        Target.Value = newValue
        Exit Sub
    End If
    
    ' If new value is empty, clear the cell
    If newValue = "" Then
        Target.Value = ""
        Exit Sub
    End If
    
    ' Check if the new value already exists in the old value
    Dim values As Variant
    values = Split(oldValue, Chr(10))
    
    Dim i As Integer
    Dim found As Boolean
    found = False
    
    ' Check if value already exists
    For i = 0 To UBound(values)
        If Trim(values(i)) = Trim(newValue) Then
            found = True
            ' Remove the existing value
            values(i) = "###REMOVE###"
            Exit For
        End If
    Next i
    
    If found Then
        ' Rebuild string without the removed value
        cellValue = ""
        For i = 0 To UBound(values)
            If values(i) <> "###REMOVE###" And Trim(values(i)) <> "" Then
                If cellValue = "" Then
                    cellValue = values(i)
                Else
                    cellValue = cellValue & Chr(10) & values(i)
                End If
            End If
        Next i
        Target.Value = cellValue
    Else
        ' Add the new value
        Target.Value = oldValue & Chr(10) & newValue
    End If
    
    Exit Sub
    
ErrorHandler:
    Application.EnableEvents = True
End Sub

Private Sub UpdateChildDropdown(ByVal ParentCell As Range, ChildRange As Range)
    On Error GoTo ErrorHandler
    
    ' Get the corresponding child cell
    Dim ChildCell As Range
    Set ChildCell = ChildRange.Cells(ParentCell.Row - 1, 1) ' Adjust for G2 start
    
    ' Get selected parents
    Dim selectedParents As String
    selectedParents = ParentCell.Value
    
    If selectedParents = "" Then
        ' Clear child dropdown if no parent selected
        ChildCell.Validation.Delete
        Exit Sub
    End If
    
    ' Get children for selected parents
    Dim childList As String
    childList = GetChildrenForParents(selectedParents)
    
    If childList <> "" Then
        ' Apply validation to child cell
        ChildCell.Validation.Delete
        ChildCell.Validation.Add Type:=xlValidateList, _
                                AlertStyle:=xlValidAlertStop, _
                                Formula1:=childList
        ChildCell.Validation.IgnoreBlank = True
        ChildCell.Validation.InCellDropdown = True
    End If
    
    Exit Sub
    
ErrorHandler:
    ' Ignore validation errors to prevent crashes
End Sub

Private Function GetChildrenForParents(selectedParents As String) As String
    On Error GoTo ErrorHandler
    
    Dim parentArray As Variant
    Dim childrenDict As Object
    Dim i As Integer, j As Integer
    Dim parentValue As String
    Dim childValue As String
    Dim result As String
    
    ' Create dictionary to store unique children
    Set childrenDict = CreateObject("Scripting.Dictionary")
    
    ' Split selected parents
    parentArray = Split(selectedParents, Chr(10))
    
    ' Get data from dropdowns sheet
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Worksheets("dropdowns")
    
    Dim parentData As Range
    Dim childData As Range
    Set parentData = ws.Range("H2:H125")
    Set childData = ws.Range("I2:I125")
    
    ' For each selected parent
    For i = 0 To UBound(parentArray)
        parentValue = Trim(parentArray(i))
        If parentValue <> "" Then
            ' Find matching children
            For j = 1 To parentData.Rows.Count
                If Trim(parentData.Cells(j, 1).Value) = parentValue Then
                    childValue = Trim(childData.Cells(j, 1).Value)
                    If childValue <> "" Then
                        childrenDict(childValue) = True
                    End If
                End If
            Next j
        End If
    Next i
    
    ' Build result string
    Dim keys As Variant
    keys = childrenDict.Keys
    
    For i = 0 To UBound(keys)
        If result = "" Then
            result = keys(i)
        Else
            result = result & "," & keys(i)
        End If
    Next i
    
    GetChildrenForParents = result
    Exit Function
    
ErrorHandler:
    GetChildrenForParents = ""
End Function

' ========================================================================
' INITIALIZATION AND SETUP PROCEDURES
' ========================================================================

Private Sub Worksheet_Activate()
    On Error Resume Next
    Call SetupInitialValidation
End Sub

Private Sub SetupInitialValidation()
    On Error Resume Next
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    ' Setup parent dropdown validation
    Dim parentRange As Range
    Set parentRange = Me.Range("F2:F50000")
    
    ' Get parent list from dropdowns sheet
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Worksheets("dropdowns")
    
    Dim parentList As String
    Dim i As Integer
    Dim cellValue As String
    
    ' Build parent list
    For i = 2 To 125
        cellValue = Trim(ws.Cells(i, 8).Value) ' Column H
        If cellValue <> "" Then
            If parentList = "" Then
                parentList = cellValue
            Else
                If InStr(parentList, cellValue) = 0 Then ' Avoid duplicates
                    parentList = parentList & "," & cellValue
                End If
            End If
        End If
    Next i
    
    ' Apply validation to parent range
    If parentList <> "" Then
        parentRange.Validation.Delete
        parentRange.Validation.Add Type:=xlValidateList, _
                                   AlertStyle:=xlValidAlertStop, _
                                   Formula1:=parentList
        parentRange.Validation.IgnoreBlank = True
        parentRange.Validation.InCellDropdown = True
    End If
    
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub

' ========================================================================
' ADDITIONAL HELPER FUNCTIONS FOR ROBUSTNESS
' ========================================================================

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    ' This helps maintain dropdown functionality after copy-paste operations
    On Error Resume Next
    
    ' Check if we're in parent or child columns and validation is missing
    If Not Intersect(Target, Me.Range("F2:F50000")) Is Nothing Then
        If Target.Validation.Type = 0 Then ' No validation
            Call SetupInitialValidation
        End If
    End If
End Sub

' Workbook-level event handlers (put this in ThisWorkbook module)
' Copy the code below into ThisWorkbook module:

'Private Sub Workbook_Open()
'    On Error Resume Next
'    Application.EnableEvents = True
'    
'    ' Initialize all worksheets
'    Dim ws As Worksheet
'    For Each ws In ThisWorkbook.Worksheets
'        If ws.Name <> "dropdowns" Then
'            ws.Activate
'            Call ws.SetupInitialValidation
'        End If
'    Next ws
'End Sub

'Private Sub Workbook_BeforeSave(SaveAsUI As Boolean, Cancel As Boolean)
'    On Error Resume Next
'    Application.EnableEvents = True
'End Sub

' ========================================================================
' UTILITY FUNCTIONS FOR MAINTENANCE
' ========================================================================

Public Sub RefreshAllDropdowns()
    ' Call this macro to refresh all dropdowns if needed
    On Error Resume Next
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Call SetupInitialValidation
    
    ' Update all child dropdowns based on current parent selections
    Dim i As Long
    For i = 2 To 50000
        If Me.Cells(i, 6).Value <> "" Then ' Column F has value
            UpdateChildDropdown Me.Cells(i, 6), Me.Range("G2:G50000")
        End If
        
        ' Exit early if we've gone past used range
        If Me.Cells(i, 6).Value = "" And Me.Cells(i, 7).Value = "" Then
            If i > Me.UsedRange.Rows.Count + 10 Then Exit For
        End If
    Next i
    
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    
    MsgBox "All dropdowns refreshed successfully!"
End Sub

Public Sub ClearAllValidation()
    ' Emergency function to clear all validation if something goes wrong
    On Error Resume Next
    
    Me.Range("F2:G50000").Validation.Delete
    MsgBox "All validation cleared. Run RefreshAllDropdowns to restore."
End Sub


'ThisWorkbook

Private Sub Workbook_Open()
    On Error Resume Next
    Application.EnableEvents = True
    
    ' Initialize all worksheets
    Dim ws As Worksheet
    For Each ws In ThisWorkbook.Worksheets
        If ws.Name <> "dropdowns" Then
            ws.Activate
        End If
    Next ws
End Sub

Private Sub Workbook_BeforeSave(SaveAsUI As Boolean, Cancel As Boolean)
    On Error Resume Next
    Application.EnableEvents = True
End Sub


