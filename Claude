'Worksheet
' Code Generated by Sidekick is for learning and experimentation purposes only.
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
    If Target.Count > 1 Then Exit Sub
    
    ' Handle multi-select for F and G columns only
    If Not Intersect(Target, Range("F:F,G:G")) Is Nothing Then
        Call HandleMultiSelect(Target)
    End If
    
    ' Update child dropdown when parent changes
    If Not Intersect(Target, Range("F:F")) Is Nothing Then
        Call UpdateChildDropdown(Target)
    End If
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    ' Set up parent validation when selecting F column
    If Target.Count = 1 And Not Intersect(Target, Range("F2:F1000")) Is Nothing Then
        Call SetupParentValidation(Target)
    End If
    
    ' Set up child validation when selecting G column
    If Target.Count = 1 And Not Intersect(Target, Range("G2:G1000")) Is Nothing Then
        Call SetupChildValidation(Target)
    End If
End Sub



'Module
' Code Generated by Sidekick is for learning and experimentation purposes only.
Option Explicit

Sub HandleMultiSelect(Target As Range)
    Dim oldValue As String
    Dim newValue As String
    Dim delimiter As String
    Dim values As Variant
    Dim i As Integer
    Dim found As Boolean
    
    delimiter = Chr(10) ' Line break
    
    ' Check if cell has validation
    On Error Resume Next
    If Target.Validation.Type <> 3 Then Exit Sub
    On Error GoTo 0
    
    Application.EnableEvents = False
    
    newValue = Target.Value
    Application.Undo
    oldValue = Target.Value
    
    If oldValue = "" Then
        Target.Value = newValue
    Else
        ' Check if new value already exists
        values = Split(oldValue, delimiter)
        found = False
        
        For i = 0 To UBound(values)
            If Trim(values(i)) = Trim(newValue) Then
                found = True
                Exit For
            End If
        Next i
        
        If found Then
            ' Remove the value (toggle off)
            Target.Value = ""
            For i = 0 To UBound(values)
                If Trim(values(i)) <> Trim(newValue) And Trim(values(i)) <> "" Then
                    If Target.Value = "" Then
                        Target.Value = Trim(values(i))
                    Else
                        Target.Value = Target.Value & delimiter & Trim(values(i))
                    End If
                End If
            Next i
        Else
            ' Add the new value
            Target.Value = oldValue & delimiter & newValue
        End If
    End If
    
    Application.EnableEvents = True
End Sub

Sub SetupParentValidation(Target As Range)
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim parentRange As Range
    Dim parentList As String
    Dim cell As Range
    Dim uniqueValues As Object
    Dim key As Variant
    
    Set ws = Worksheets("Dropdowns")
    Set uniqueValues = CreateObject("Scripting.Dictionary")
    
    ' Find last row in column H
    lastRow = ws.Cells(ws.Rows.Count, "H").End(xlUp).Row
    
    If lastRow < 2 Then Exit Sub
    
    ' Get unique values from column H
    Set parentRange = ws.Range("H2:H" & lastRow)
    
    For Each cell In parentRange
        If Trim(cell.Value) <> "" Then
            uniqueValues(Trim(cell.Value)) = True
        End If
    Next cell
    
    ' Create comma-separated list
    For Each key In uniqueValues.Keys
        If parentList = "" Then
            parentList = key
        Else
            parentList = parentList & "," & key
        End If
    Next key
    
    ' Apply validation
    If parentList <> "" Then
        With Target.Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Formula1:=parentList
            .IgnoreBlank = True
            .InCellDropdown = True
        End With
    End If
End Sub

Sub SetupChildValidation(Target As Range)
    Dim parentCell As Range
    Dim childList As String
    
    Set parentCell = Target.Offset(0, -1) ' F column cell
    
    If parentCell.Value <> "" Then
        childList = GetChildOptions(parentCell.Value)
        
        If childList <> "" Then
            With Target.Validation
                .Delete
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Formula1:=childList
                .IgnoreBlank = True
                .InCellDropdown = True
            End With
        End If
    End If
End Sub

Sub UpdateChildDropdown(Target As Range)
    Dim childCell As Range
    Dim childList As String
    
    Set childCell = Target.Offset(0, 1) ' G column cell
    
    Application.EnableEvents = False
    childCell.ClearContents
    childCell.Validation.Delete
    Application.EnableEvents = True
    
    If Target.Value <> "" Then
        childList = GetChildOptions(Target.Value)
        
        If childList <> "" Then
            With childCell.Validation
                .Delete
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Formula1:=childList
                .IgnoreBlank = True
                .InCellDropdown = True
            End With
        End If
    End If
End Sub

Function GetChildOptions(parentValues As String) As String
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim parents As Variant
    Dim uniqueChildren As Object
    Dim i As Long, j As Long
    Dim parentValue As String
    Dim childValue As String
    Dim result As String
    Dim key As Variant
    
    Set ws = Worksheets("Dropdowns")
    Set uniqueChildren = CreateObject("Scripting.Dictionary")
    
    lastRow = ws.Cells(ws.Rows.Count, "H").End(xlUp).Row
    
    If lastRow < 2 Then
        GetChildOptions = ""
        Exit Function
    End If
    
    ' Split parent values
    If InStr(parentValues, Chr(10)) > 0 Then
        parents = Split(parentValues, Chr(10))
    Else
        ReDim parents(0)
        parents(0) = parentValues
    End If
    
    ' Find children for each parent
    For i = 0 To UBound(parents)
        parentValue = Trim(parents(i))
        If parentValue <> "" Then
            For j = 2 To lastRow
                If Trim(ws.Cells(j, "H").Value) = parentValue Then
                    childValue = Trim(ws.Cells(j, "I").Value)
                    If childValue <> "" Then
                        uniqueChildren(childValue) = True
                    End If
                End If
            Next j
        End If
    Next i
    
    ' Create comma-separated list
    For Each key In uniqueChildren.Keys
        If result = "" Then
            result = key
        Else
            result = result & "," & key
        End If
    Next key
    
    GetChildOptions = result
End Function

' Optional: Run once to set up all F column validations
Sub InitializeParentColumn()
    Dim ws As Worksheet
    Dim wsDropdowns As Worksheet
    Dim lastRow As Long
    Dim parentRange As Range
    Dim parentList As String
    Dim cell As Range
    Dim uniqueValues As Object
    Dim key As Variant
    
    Set ws = Worksheets("Tracker")
    Set wsDropdowns = Worksheets("Dropdowns")
    Set uniqueValues = CreateObject("Scripting.Dictionary")
    
    lastRow = wsDropdowns.Cells(wsDropdowns.Rows.Count, "H").End(xlUp).Row
    
    If lastRow < 2 Then
        MsgBox "No data found in Dropdowns sheet column H"
        Exit Sub
    End If
    
    Set parentRange = wsDropdowns.Range("H2:H" & lastRow)
    
    For Each cell In parentRange
        If Trim(cell.Value) <> "" Then
            uniqueValues(Trim(cell.Value)) = True
        End If
    Next cell
    
    For Each key In uniqueValues.Keys
        If parentList = "" Then
            parentList = key
        Else
            parentList = parentList & "," & key
        End If
    Next key
    
    If parentList <> "" Then
        With ws.Range("F2:F1000").Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Formula1:=parentList
            .IgnoreBlank = True
            .InCellDropdown = True
        End With
        MsgBox "Parent validation applied to F2:F1000"
    End If
End Sub
