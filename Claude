' Workbook
' Code Generated by Sidekick is for learning and experimentation purposes only.
Private Sub Workbook_Open()
    On Error Resume Next
    Call SetupValidationForFG
    On Error GoTo 0
End Sub

'Sheet
' Code Generated by Sidekick is for learning and experimentation purposes only.
Private Sub Worksheet_Change(ByVal Target As Range)
    If Target.Cells.Count > 1 Then Exit Sub
    
    Dim rngF As Range, rngG As Range
    Set rngF = Me.Range("F2:F50000")
    Set rngG = Me.Range("G2:G50000")
    
    If Not Intersect(Target, rngF) Is Nothing Then
        Application.EnableEvents = False
        Call UpdateChildValidation(Target)
        Call HandleMultiSelect(Target)
        Application.EnableEvents = True
    ElseIf Not Intersect(Target, rngG) Is Nothing Then
        Application.EnableEvents = False
        Call HandleMultiSelect(Target)
        Application.EnableEvents = True
    End If
End Sub

'Module
' Code Generated by Sidekick is for learning and experimentation purposes only.
Public Sub SetupValidationForFG()
    Dim ws As Worksheet
    Set ws = ActiveSheet ' Change to your actual sheet name if needed
    
    Dim lastRow As Long
    lastRow = 100 ' Start with smaller range for testing
    
    Dim i As Long
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    For i = 2 To lastRow
        ' Setup validation for column F (parent dropdown)
        With ws.Cells(i, 6).Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
                 Operator:=xlBetween, Formula1:="=dropdowns!$H$2:$H$125"
            .IgnoreBlank = True
            .InCellDropdown = True
        End With
        
        ' Clear column G initially
        ws.Cells(i, 7).ClearContents
        ws.Cells(i, 7).Validation.Delete
    Next i
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
End Sub

Public Sub UpdateChildValidation(cellF As Range)
    On Error GoTo ErrorHandler
    
    Dim wsDrop As Worksheet
    Set wsDrop = ThisWorkbook.Sheets("dropdowns")
    
    ' Clear the child cell first
    Dim cellG As Range
    Set cellG = cellF.Offset(0, 1)
    cellG.ClearContents
    cellG.Validation.Delete
    
    ' If parent cell is empty, exit
    If Trim(cellF.Value) = "" Then Exit Sub
    
    ' Get selected parents (split by line breaks for multi-select)
    Dim parents As Variant
    Dim parentString As String
    parentString = Replace(cellF.Value, Chr(10), "|") ' Replace line breaks with |
    parents = Split(parentString, "|")
    
    ' Build dictionary of parent-child relationships
    Dim dict As Object
    Set dict = CreateObject("Scripting.Dictionary")
    
    Dim i As Long
    For i = 2 To 125
        If Not IsError(wsDrop.Cells(i, "H")) And Not IsEmpty(wsDrop.Cells(i, "H")) Then
            Dim parentVal As String
            Dim childVal As String
            parentVal = Trim(CStr(wsDrop.Cells(i, "H").Value))
            childVal = Trim(CStr(wsDrop.Cells(i, "I").Value))
            
            If parentVal <> "" And childVal <> "" Then
                If Not dict.exists(parentVal) Then
                    dict(parentVal) = childVal
                Else
                    dict(parentVal) = dict(parentVal) & "," & childVal
                End If
            End If
        End If
    Next i
    
    ' Collect all children for selected parents
    Dim allChildren As String
    Dim j As Long
    
    For j = LBound(parents) To UBound(parents)
        Dim currentParent As String
        currentParent = Trim(CStr(parents(j)))
        
        If currentParent <> "" And dict.exists(currentParent) Then
            If allChildren <> "" Then allChildren = allChildren & ","
            allChildren = allChildren & dict(currentParent)
        End If
    Next j
    
    ' Remove duplicates from children list
    If allChildren <> "" Then
        Dim childArray As Variant
        childArray = Split(allChildren, ",")
        
        Dim uniqueDict As Object
        Set uniqueDict = CreateObject("Scripting.Dictionary")
        
        For i = LBound(childArray) To UBound(childArray)
            Dim childItem As String
            childItem = Trim(CStr(childArray(i)))
            If childItem <> "" Then
                uniqueDict(childItem) = 1
            End If
        Next i
        
        ' Build final children list
        Dim finalChildren As String
        Dim key As Variant
        For Each key In uniqueDict.keys
            If finalChildren <> "" Then finalChildren = finalChildren & ","
            finalChildren = finalChildren & key
        Next key
        
        ' Apply validation to child cell (column G)
        If finalChildren <> "" Then
            With cellG.Validation
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
                     Operator:=xlBetween, Formula1:=finalChildren
                .IgnoreBlank = True
                .InCellDropdown = True
            End With
        End If
    End If
    
    Exit Sub
    
ErrorHandler:
    Application.EnableEvents = True
    MsgBox "Error in UpdateChildValidation: " & Err.Description
End Sub

Public Sub HandleMultiSelect(cell As Range)
    On Error GoTo ErrorHandler
    
    ' Check if cell has validation
    If cell.Validation.Type <> xlValidateList Then Exit Sub
    
    Dim newValue As String
    Dim oldValue As String
    
    newValue = cell.Value
    
    ' Get the old value by undoing
    Application.Undo
    oldValue = cell.Value
    
    ' If old value was empty, just set the new value
    If Trim(oldValue) = "" Then
        cell.Value = newValue
        Exit Sub
    End If
    
    ' Check if the new value already exists in the old value
    Dim valueArray As Variant
    valueArray = Split(oldValue, Chr(10))
    
    Dim found As Boolean
    found = False
    Dim i As Long
    
    ' Check if new value already exists (to remove it)
    For i = LBound(valueArray) To UBound(valueArray)
        If Trim(CStr(valueArray(i))) = Trim(newValue) Then
            found = True
            valueArray(i) = "~~DELETE~~" ' Mark for deletion
            Exit For
        End If
    Next i
    
    ' Rebuild the string
    Dim finalValue As String
    finalValue = ""
    
    For i = LBound(valueArray) To UBound(valueArray)
        If CStr(valueArray(i)) <> "~~DELETE~~" And Trim(CStr(valueArray(i))) <> "" Then
            If finalValue <> "" Then finalValue = finalValue & Chr(10)
            finalValue = finalValue & Trim(CStr(valueArray(i)))
        End If
    Next i
    
    ' If value wasn't found, add it
    If Not found Then
        If finalValue <> "" Then finalValue = finalValue & Chr(10)
        finalValue = finalValue & newValue
    End If
    
    ' Set the final value
    cell.Value = finalValue
    
    ' If this is column F, update the child validation
    If cell.Column = 6 Then
        Call UpdateChildValidation(cell)
    End If
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in HandleMultiSelect: " & Err.Description
End Sub
