' Code Generated by Sidekick is for learning and experimentation purposes only.
Option Explicit

' Multi-select logic on double-click (does NOT block normal editing)
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    Dim DelimiterType As String
    Dim arr As Variant
    Dim newValue As String
    Dim i As Long, exists As Boolean
    Dim cell As Range

    DelimiterType = vbLf

    If Not Intersect(Target, Me.Range("F2:F50000,G2:G50000")) Is Nothing Then
        Set cell = Target
        If cell.Validation.Type = 3 Then
            newValue = InputBox("Type or paste the value to add/remove:" & vbCrLf & _
                                "(Current: " & cell.Value & ")", "Multi-Select", "")
            If newValue = "" Then Exit Sub

            arr = Split(cell.Value, DelimiterType)
            exists = False
            For i = LBound(arr) To UBound(arr)
                If Trim(arr(i)) = Trim(newValue) Then
                    exists = True
                    Exit For
                End If
            Next i
            If exists Then
                Dim tempList As String: tempList = ""
                For i = LBound(arr) To UBound(arr)
                    If Trim(arr(i)) <> Trim(newValue) Then
                        If tempList = "" Then
                            tempList = arr(i)
                        Else
                            tempList = tempList & DelimiterType & arr(i)
                        End If
                    End If
                Next i
                cell.Value = tempList
            Else
                If cell.Value = "" Then
                    cell.Value = newValue
                Else
                    cell.Value = cell.Value & DelimiterType & newValue
                End If
            End If
            Cancel = True ' Prevent default double-click editing
        End If
    End If
End Sub

' Dependent dropdown logic on change (safe for bulk operations)
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp

    Dim wsDropdowns As Worksheet
    Dim lastRow As Long, i As Long, j As Long
    Dim parentCell As Range
    Dim selectedParents As Variant, childList As String
    Dim childCell As Range
    Dim DelimiterType As String

    Set wsDropdowns = ThisWorkbook.Sheets("dropdowns")
    lastRow = 117
    DelimiterType = vbLf

    Application.EnableEvents = False

    ' Only update dependent dropdowns for changes in F2:F50000
    If Not Intersect(Target, Me.Range("F2:F50000")) Is Nothing Then
        For Each parentCell In Intersect(Target, Me.Range("F2:F50000"))
            Set childCell = Me.Cells(parentCell.Row, "G")
            childList = ""
            If parentCell.Value <> "" Then
                selectedParents = Split(parentCell.Value, DelimiterType)
                For i = LBound(selectedParents) To UBound(selectedParents)
                    selectedParents(i) = Trim(selectedParents(i))
                Next i
                For j = 2 To lastRow
                    For i = LBound(selectedParents) To UBound(selectedParents)
                        If selectedParents(i) <> "" Then
                            If StrComp(wsDropdowns.Cells(j, "H").Value, selectedParents(i), vbTextCompare) = 0 Then
                                If InStr(1, "," & childList & ",", "," & wsDropdowns.Cells(j, "I").Value & ",", vbTextCompare) = 0 Then
                                    childList = childList & wsDropdowns.Cells(j, "I").Value & ","
                                End If
                            End If
                        End If
                    Next i
                Next j
                If Len(childList) > 0 Then childList = Left(childList, Len(childList) - 1)
                On Error Resume Next
                With childCell.Validation
                    .Delete
                    If childList <> "" Then
                        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=childList
                    Else
                        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=" "
                    End If
                    .IgnoreBlank = True
                    .InCellDropdown = True
                    .ShowInput = True
                    .ShowError = True
                End With
                On Error GoTo CleanUp
            Else
                On Error Resume Next
                With childCell.Validation
                    .Delete
                    .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=" "
                    .IgnoreBlank = True
                    .InCellDropdown = True
                    .ShowInput = True
                    .ShowError = True
                End With
                On Error GoTo CleanUp
            End If
        Next parentCell
    End If

    Application.EnableEvents = True
    Exit Sub

CleanUp:
    Application.EnableEvents = True
End Sub
